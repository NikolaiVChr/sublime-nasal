{
   "scope": "source.nas",

   "completions":
   [
      { "trigger": "snippet: condition ternary", "contents": "(condition) ? condition_true_expr1 : condition_false_expr2" },
      { "trigger": "snippet: condition if...", "contents": "if (condition) {\n\t# do something\n}" },
      { "trigger": "snippet:condition if...else", "contents": "if (condition) {\n\t# do something\n} else {\n\t# do something\n}" },
      { "trigger": "snippet: condition if...elsif", "contents": "if (condition) {\n\t# do something\n} elsif (condition) {\n\t# do something\n}" },
      { "trigger": "snippet: loop for", "contents": "for (var i=0; i < 3; i = i+1) {\n\t# do something\n}" },
      { "trigger": "snippet: loop while", "contents": "while (condition) {\n\t# do something\n}" },
      { "trigger": "snippet: loop foreach", "contents": "foreach(elem; list) {\n\tdoSomething(elem);\n}" },
      { "trigger": "snippet: loop forindex", "contents": "forindex(i; list) {\n\tdoSomething(list[i]);\n}" },

      { "trigger": "func", "contents": "func(params) {\n\t# do Something\n}" },
      { "trigger": "append", "contents": "append(vector, element[, element[, ...]])" },
      { "trigger": "bind", "contents": "bind(function, locals[, outer_scope])" },
      { "trigger": "call", "contents": "call(func[, args[, me[, locals[, error]]])" },
      { "trigger": "caller", "contents": "caller([level])" },
      { "trigger": "chr", "contents": "chr(code)" },
      { "trigger": "closure", "contents": "closure(func[, level])" },
      { "trigger": "cmp", "contents": "cmp(a, b)" },
      { "trigger": "compile", "contents": "compile(code[, filename])" },
      { "trigger": "contains", "contents": "contains(hash, key)" },
      { "trigger": "delete", "contents": "delete(hash, key)" },
      { "trigger": "die", "contents": "die(error)" },
      { "trigger": "find", "contents": "find(needle, haystack)" },
      { "trigger": "ghosttype", "contents": "ghosttype(ghost)" },
      { "trigger": "id", "contents": "id(object)" },
      { "trigger": "int", "contents": "int(number)" },
      { "trigger": "keys", "contents": "keys(hash)" },
      { "trigger": "left", "contents": "left(string, length)" },
      { "trigger": "num", "contents": "num(number)" },
      { "trigger": "pop", "contents": "pop(vector)" },
      { "trigger": "right", "contents": "right(string, length)" },
      { "trigger": "setsize", "contents": "setsize(vector, size)" },
      { "trigger": "size", "contents": "size(object)" },
      { "trigger": "sort", "contents": "sort(vector, function)" },
      { "trigger": "split", "contents": "split(delimiter, string)" },
      { "trigger": "sprintf", "contents": "sprintf(format[, arg[, arg, [...]]])" },
      { "trigger": "streq", "contents": "streq(a, b)" },
      { "trigger": "substr", "contents": "substr(string, start [, length])" },
      { "trigger": "subvec", "contents": "subvec(vector, start[, length])" },
      { "trigger": "typeof", "contents": "typeof(object)" },

      { "trigger": "abort", "contents": "abort()" },
      { "trigger": "abs", "contents": "abs(number)" },
      { "trigger": "aircraftToCart", "contents": "aircraftToCart({x: 0, y: 0, z: 0})" },
      { "trigger": "addcommand", "contents": "addcommand(name, code)" },
      { "trigger": "airportinfo(id)", "contents": "airportinfo(id)" },
      { "trigger": "airportinfo(lat, lon[, type])", "contents": "airportinfo(lat, lon[, type])" },
      { "trigger": "airportinfo(type)", "contents": "airportinfo(type)" },
      { "trigger": "airwaysRoute", "contents": "airwaysRoute(start, end[, type])" },
      { "trigger": "assert", "contents": "assert(condition[, message])" },
      { "trigger": "carttogeod", "contents": "carttogeod(x, y, z)" },
      { "trigger": "cmdarg", "contents": "cmdarg()" },
      { "trigger": "courseAndDistance(to)", "contents": "courseAndDistance(to)" },
      { "trigger": "courseAndDistance(from, to)", "contents": "courseAndDistance(from, to)" },
      { "trigger": "createDiscontinuity", "contents": "createDiscontinuity()" },
      { "trigger": "createViaTo", "contents": "createViaTo(airway, waypoint)" },
      { "trigger": "createWP", "contents": "createWP(pos, name[, flag])" },
      { "trigger": "createWPFrom", "contents": "createWPFrom(object[, flag])" },
      { "trigger": "defined", "contents": "defined(symbol)" },
      { "trigger": "directory", "contents": "directory(path)" },
      { "trigger": "fgcommand", "contents": "fgcommand(cmd[, args])" },
      { "trigger": "findAirportsByICAO", "contents": "findAirportsByICAO(search[, type])" },
      { "trigger": "findAirportsWithinRange", "contents": "findAirportsWithinRange([pos, ]range[, type])" },
      { "trigger": "findFixesByID", "contents": "findFixesByID([pos, ]id)" },
      { "trigger": "findNavaidByFrequency", "contents": "findNavaidByFrequency([pos, ]freq[, type])" },
      { "trigger": "findNavaidsByFrequency", "contents": "findNavaidsByFrequency([pos, ]freq[, type])" },
      { "trigger": "findNavaidsByID", "contents": "findNavaidsByID([pos, ]id[, type])" },
      { "trigger": "findNavaidsWithinRange", "contents": "findNavaidsWithinRange([pos, ]range[, type])" },
      { "trigger": "finddata", "contents": "finddata(path)" },
      { "trigger": "flightplan", "contents": "flightplan([path])" },
      { "trigger": "geodinfo", "contents": "geodinfo(lat, lon[, max_alt])" },
      { "trigger": "geodtocart", "contents": "geodtocart(lat, lon, alt)" },
      { "trigger": "get_cart_ground_intersection", "contents": "get_cart_ground_intersection({x: 0, y: 0, z: 0}, {x: 0, y: 0, z: 0})" },
      { "trigger": "getprop", "contents": "getprop(path[, path[, ...]])" },
      { "trigger": "greatCircleMove", "contents": "greatCircleMove([pos, ]course, dist)" },
      { "trigger": "interpolate", "contents": "interpolate(prop, value1, time1[, value2, time2[, ...]])" },
      { "trigger": "isa", "contents": "isa(object, class)" },
      { "trigger": "logprint", "contents": "logprint(priority[, msg[, msg[, ...]]])" },
      { "trigger": "magvar", "contents": "magvar([pos])" },
      { "trigger": "maketimer", "contents": "maketimer(interval[, self], function)" },
      { "trigger": "md5", "contents": "md5(string)" },
      { "trigger": "navinfo", "contents": "navinfo(lat, lon, type, id)" },
      { "trigger": "parse_markdown", "contents": "parse_markdown(markdown)" },
      { "trigger": "parsexml", "contents": "parsexml(path[, start[, end[, data[, pro_ins]]]])" },
      { "trigger": "print", "contents": "print(data[, data[, ...]])" },
      { "trigger": "printf", "contents": "printf(format[, arg[, arg, [...]]])" },
      { "trigger": "printlog", "contents": "printlog(level, data[, data[, ...]])" },
      { "trigger": "rand", "contents": "rand()" },
      { "trigger": "registerFlightPlanDelegate", "contents": "registerFlightPlanDelegate(init_func)" },
      { "trigger": "removecommand", "contents": "removecommand(cmd)" },
      { "trigger": "removelistener", "contents": "removelistener(id)" },
      { "trigger": "resolvepath", "contents": "resolvepath(path)" },
      { "trigger": "setlistener", "contents": "setlistener(node, code[, init[, type]])" },
      { "trigger": "setprop", "contents": "setprop(path[, path[, ...]], value)" },
      { "trigger": "settimer", "contents": "settimer(function, delta[, realtime])" },
      { "trigger": "srand", "contents": "srand()" },
      { "trigger": "systime", "contents": "systime()" },
      { "trigger": "thisfunc", "contents": "thisfunc()" },
      { "trigger": "tileIndex", "contents": "tileIndex()" },
      { "trigger": "tilePath", "contents": "tilePath()" },
      
      { "trigger": "clipboard.getText", "contents": "clipboard.getText([type])" },
      { "trigger": "clipboard.setText", "contents": "clipboard.setText(text[, type])" },
      { "trigger": "clipboard.CLIPBOARD", "contents": "clipboard.CLIPBOARD" },
      { "trigger": "clipboard.SELECTION", "contents": "clipboard.SELECTION" },

      { "trigger": "geo.Coord.new", "contents": "geo.Coord.new([coord])" },
      { "trigger": "geo.Coord.set", "contents": "geo.Coord.set(coord)" },
      { "trigger": "geo.Coord.set_lat", "contents": "geo.Coord.set_lat(lat)" },
      { "trigger": "geo.Coord.set_lon", "contents": "geo.Coord.set_lon(lon)" },
      { "trigger": "geo.Coord.set_alt", "contents": "geo.Coord.set_alt(alt)" },
      { "trigger": "geo.Coord.set_latlon", "contents": "geo.Coord.set_latlon(lat, lon[, alt])" },
      { "trigger": "geo.Coord.set_x", "contents": "geo.Coord.set_x(x)" },
      { "trigger": "geo.Coord.set_y", "contents": "geo.Coord.set_y(y)" },
      { "trigger": "geo.Coord.set_z", "contents": "geo.Coord.set_z(z)" },
      { "trigger": "geo.Coord.set_xyz", "contents": "geo.Coord.set_xyz(x, y, z)" },
      { "trigger": "geo.Coord.lat", "contents": "geo.Coord.lat()" },
      { "trigger": "geo.Coord.lon", "contents": "geo.Coord.lon()" },
      { "trigger": "geo.Coord.alt", "contents": "geo.Coord.alt()" },
      { "trigger": "geo.Coord.latlon", "contents": "geo.Coord.latlon()" },
      { "trigger": "geo.Coord.x", "contents": "geo.Coord.x()" },
      { "trigger": "geo.Coord.y", "contents": "geo.Coord.y()" },
      { "trigger": "geo.Coord.z", "contents": "geo.Coord.z()" },
      { "trigger": "geo.Coord.xyz", "contents": "geo.Coord.xyz()" },
      { "trigger": "geo.Coord.is_defined", "contents": "geo.Coord.is_defined()" },
      { "trigger": "geo.Coord.dump", "contents": "geo.Coord.dump()" },
      { "trigger": "geo.Coord.course_to", "contents": "geo.Coord.course_to(coord)" },
      { "trigger": "geo.Coord.distance_to", "contents": "geo.Coord.distance_to(coord)" },
      { "trigger": "geo.Coord.direct_distance_to", "contents": "geo.Coord.direct_distance_to(coord)" },
      { "trigger": "geo.Coord.apply_course_distance", "contents": "geo.Coord.apply_course_distance(course, dist)" },
      { "trigger": "geo.PositionedSearch.new", "contents": "geo.PositionedSearch.new(searchCmd, onAdded, onRemoved[, obj])" },
      { "trigger": "geo.PositionedSearch.test", "contents": "geo.PositionedSearch.test([from[, to]])" },
      { "trigger": "geo.PositionedSearch.update", "contents": "geo.PositionedSearch.update([searchCmd])" },
      { "trigger": "geo.PositionedSearch._equals", "contents": "geo.PositionedSearch._equals" },
      { "trigger": "geo.aircraft_position", "contents": "geo.aircraft_position()" },
      { "trigger": "geo.click_position", "contents": "geo.click_position()" },
      { "trigger": "geo.elevation", "contents": "geo.elevation(lat, lon[, max_alt])" },
      { "trigger": "geo.format", "contents": "geo.format(lat, lon)" },
      { "trigger": "geo.normdeg", "contents": "geo.normdeg(angle)" },
      { "trigger": "geo.normdeg180", "contents": "geo.normdeg180(angle)" },
      { "trigger": "geo.put_model(path, lat, lon[, elev[, hdg[, pitch[, roll]]]])", "contents": "geo.put_model(path, lat, lon[, elev[, hdg[, pitch[, roll]]]])" },
      { "trigger": "geo.put_model(path, coord[, hdg[, pitch[, roll]]]])", "contents": "geo.put_model(path, coord[, hdg[, pitch[, roll]]]])" },
      { "trigger": "geo.tile_index", "contents": "geo.tile_index(lat, lon)" },
      { "trigger": "geo.tile_path", "contents": "geo.tile_path(lat, lon)" },
      { "trigger": "geo.viewer_position", "contents": "geo.viewer_position()" },
      { "trigger": "geo.ERAD", "contents": "geo.ERAD" },

      { "trigger": "gui.popupTip", "contents": "gui.popupTip(text = '', delay = 10, override = 0, position = {'y': 10, 'x': 10})" },
      { "trigger": "gui.showDialog", "contents": "gui.showDialog(name)" },
      { "trigger": "gui.menuEnable", "contents": "gui.menuEnable(searchname, state)" },
      { "trigger": "gui.menuBind", "contents": "gui.menuBind(searchname, command)" },
      { "trigger": "gui.setCursor", "contents": "gui.setCursor(x = nil, y = nil, cursor = gui.cursor_types.none)" },
      { "trigger": "gui.cursor_types.none", "contents": "gui.cursor_types.none" },
      { "trigger": "gui.cursor_types.pointer", "contents": "gui.cursor_types.pointer" },
      { "trigger": "gui.cursor_types.wait", "contents": "gui.cursor_types.wait" },
      { "trigger": "gui.cursor_types.crosshair", "contents": "gui.cursor_types.crosshair" },
      { "trigger": "gui.cursor_types.leftright", "contents": "gui.cursor_types.leftright" },
      { "trigger": "gui.cursor_types.topside", "contents": "gui.cursor_types.topside" },
      { "trigger": "gui.cursor_types.bottomside", "contents": "gui.cursor_types.bottomside" },
      { "trigger": "gui.cursor_types.leftside", "contents": "gui.cursor_types.leftside" },
      { "trigger": "gui.cursor_types.rightside", "contents": "gui.cursor_types.rightside" },
      { "trigger": "gui.cursor_types.topleft", "contents": "gui.cursor_types.topleft" },
      { "trigger": "gui.cursor_types.topright", "contents": "gui.cursor_types.topright" },
      { "trigger": "gui.cursor_types.bottomleft", "contents": "gui.cursor_types.bottomleft" },
      { "trigger": "gui.cursor_types.bottomright", "contents": "gui.cursor_types.bottomright" },
      { "trigger": "gui.findElementByName", "contents": "gui.findElementByName(dialog,name)" },
      { "trigger": "gui.fpsDisplay", "contents": "gui.fpsDisplay(n)" },
      { "trigger": "gui.latencyDisplay", "contents": "latencyDisplay(n)" },

      { "trigger": "io.basename", "contents": "io.basename(path)" },
      { "trigger": "io.close", "contents": "io.close(file)" },
      { "trigger": "io.dirname", "contents": "io.dirname(path)" },
      { "trigger": "io.flush", "contents": "io.flush(file)" },
      { "trigger": "io.include", "contents": "io.include(file)" },
      { "trigger": "io.load_nasal", "contents": "io.load_nasal(file[, module])" },
      { "trigger": "io.open", "contents": "io.open(path[, mode])" },
      { "trigger": "io.read", "contents": "io.read(file, buf, len)" },
      { "trigger": "io.read_airport_properties", "contents": "io.read_airport_properties(icao, fname[, target])" },
      { "trigger": "io.read_properties", "contents": "io.read_properties(path[, target])" },
      { "trigger": "io.readfile", "contents": "io.readfile(file)" },
      { "trigger": "io.readln", "contents": "io.readln(file)" },
      { "trigger": "io.readxml", "contents": "io.readxml(path[, prefix])" },
      { "trigger": "io.seek", "contents": "io.seek(file, position, whence)" },
      { "trigger": "io.stat", "contents": "io.stat(path)" },
      { "trigger": "io.tell", "contents": "io.tell(file)" },
      { "trigger": "io.write", "contents": "io.write(file, string)" },
      { "trigger": "io.write_properties", "contents": "io.write_properties(path, prop)" },
      { "trigger": "io.basename", "contents": "io.basename(path, node[, indent[, prefix]])" },
      { "trigger": "io.SEEK_CUR", "contents": "io.SEEK_CUR" },
      { "trigger": "io.SEEK_END", "contents": "io.SEEK_END" },
      { "trigger": "io.SEEK_SET", "contents": "io.SEEK_SET" },

      { "trigger": "math.abs", "contents": "math.abs(x)" },
      { "trigger": "math.acos", "contents": "math.acos(x)" },
      { "trigger": "math.asin", "contents": "math.asin(x)" },
      { "trigger": "math.atan2", "contents": "math.atan2(y, x)" },
      { "trigger": "math.avg", "contents": "math.avg(x[, y[, z[, ...]]])" },
      { "trigger": "math.ceil", "contents": "math.ceil(x)" },
      { "trigger": "math.clamp", "contents": "math.clamp(x, min, max)" },
      { "trigger": "math.cos", "contents": "math.cos(x)" },
      { "trigger": "math.exp", "contents": "math.exp(x)" },
      { "trigger": "math.floor", "contents": "math.floor(x)" },
      { "trigger": "math.fmod", "contents": "math.fmod(x, y)" },
      { "trigger": "math.ln", "contents": "math.ln(x)" },
      { "trigger": "math.log10", "contents": "math.log10(x)" },
      { "trigger": "math.max", "contents": "math.max(x[, y[, z[, ...]]])" },
      { "trigger": "math.min", "contents": "math.min(x[, y[, z[, ...]]])" },
      { "trigger": "math.mod", "contents": "math.mod(x, y)" },
      { "trigger": "math.periodic", "contents": "math.periodic(min, max, x)" },
      { "trigger": "math.pow", "contents": "math.pow(b, n)" },
      { "trigger": "math.round", "contents": "math.round(x[, p])" },
      { "trigger": "math.sin", "contents": "math.sin(x)" },
      { "trigger": "math.sgn", "contents": "math.sgn(x)" },
      { "trigger": "math.sqrt", "contents": "math.sqrt(x)" },
      { "trigger": "math.tan", "contents": "math.tan(x)" },
      { "trigger": "math.e", "contents": "math.e" },
      { "trigger": "math.pi", "contents": "math.pi" },
      
      { "trigger": "nil", "contents": "nil" },

      { "trigger": "props.globals.new", "contents": "props.globals.new(array)" },
      { "trigger": "props.globals.addChild", "contents": "props.globals.addChild(name = '', min_idx = 0, append = 1)" },
      { "trigger": "props.globals.addChildren", "contents": "props.globals.addChildren(name = '', min_idx = 0, append = 1)" },
      { "trigger": "props.globals.alias", "contents": "props.globals.alias(node)" },
      { "trigger": "props.globals.clearValue", "contents": "props.globals.clearValue()" },
      { "trigger": "props.globals.equals", "contents": "props.globals.equals(node)" },
      { "trigger": "props.globals.getAliasTarget", "contents": "props.globals.getAliasTarget()" },
      { "trigger": "props.globals.getAttribute", "contents": "props.globals.getAttribute(rel_path = '', name = '');" },
      { "trigger": "props.globals.getBoolValue", "contents": "props.globals.getBoolValue()" },
      { "trigger": "props.globals.getChild", "contents": "props.globals.getChild(rel_path = '', idx = 0, create = 0)" },
      { "trigger": "props.globals.getChildren", "contents": "props.globals.getChildren(name = '');" },
      { "trigger": "props.globals.getIndex", "contents": "props.globals.getIndex()" },
      { "trigger": "props.globals.getName", "contents": "props.globals.getName()" },
      { "trigger": "props.globals.getNode", "contents": "props.globals.getNode(rel_path = '', create = 0)" },
      { "trigger": "props.globals.getParent", "contents": "props.globals.getParent()" },
      { "trigger": "props.globals.getPath", "contents": "props.globals.getPath()" },
      { "trigger": "props.globals.getType", "contents": "props.globals.getType()" },
      { "trigger": "props.globals.getValue", "contents": "props.globals.getValue(rel_path = '')" },
      { "trigger": "props.globals.getValues", "contents": "props.globals.getValues()" },
      { "trigger": "props.globals.initNode", "contents": "props.globals.initNode(path = '', value = 0, type = 'BOOL', force = 0)" },
      { "trigger": "props.globals.remove()", "contents": "props.globals.remove()" },
      { "trigger": "props.globals.removeAllChildren", "contents": "props.globals.removeAllChildren()" },
      { "trigger": "props.globals.removeChild", "contents": "props.globals.removeChild(rel_path = '', idx = 0)" },
      { "trigger": "props.globals.removeChildren", "contents": "props.globals.removeChildren(name = '');" },
      { "trigger": "props.globals.setAttribute", "contents": "props.globals.setAttribute(rel_path = '', attr = 'readable', value = 0)" },
      { "trigger": "props.globals.setBoolValue", "contents": "props.globals.setBoolValue(rel_path = '', value = 0)" },
      { "trigger": "props.globals.setDoubleValue", "contents": "props.globals.setDoubleValue(rel_path = '', value = 0)" },
      { "trigger": "props.globals.setIntValue", "contents": "props.globals.setIntValue(rel_path = '', value = 0)" },
      { "trigger": "props.globals.setValue", "contents": "props.globals.setValue(rel_path = '', value = '')" },
      { "trigger": "props.globals.setValues", "contents": "props.globals.setValues(val = [])" },
      { "trigger": "props.globals.unalias", "contents": "props.globals.unalias()" },
      { "trigger": "props.condition", "contents": "props.condition(node)" },
      { "trigger": "props.copy", "contents": "props.copy(src = node, dest = node, attr = 0);" },
      { "trigger": "props.dump", "contents": "props.dump(node)" },
      { "trigger": "props.getNode", "contents": "props.getNode(name = '')" },
      { "trigger": "props.nodeList", "contents": "props.nodeList(hash = [])" },
      { "trigger": "props.runBinding", "contents": "props.runBinding(node, module = ')" },
      { "trigger": "props.setAll", "contents": "props.setAll(base = '', child = '', value = 0)" },
      { "trigger": "props.wrap", "contents": "props.wrap(node)" },
      { "trigger": "props.wrapNode", "contents": "props.wrapNode(node)" },

      { "trigger": "D2R", "contents": "D2R" },
      { "trigger": "FPS2KT", "contents": "FPS2KT" },
      { "trigger": "FT2M", "contents": "FT2M" },
      { "trigger": "GAL2L", "contents": "GAL2L" },
      { "trigger": "IN2M", "contents": "IN2M" },
      { "trigger": "KG2LB", "contents": "KG2LB" },
      { "trigger": "KT2FPS", "contents": "KT2FPS" },
      { "trigger": "KT2MPS", "contents": "KT2MPS" },
      { "trigger": "L2GAL", "contents": "L2GAL" },
      { "trigger": "LB2KG", "contents": "LB2KG" },
      { "trigger": "M2FT", "contents": "M2FT" },
      { "trigger": "M2IN", "contents": "M2IN" },
      { "trigger": "M2NM", "contents": "M2NM" },
      { "trigger": "MPS2KT", "contents": "MPS2KT" },
      { "trigger": "NM2M", "contents": "NM2M" },
      { "trigger": "R2D", "contents": "R2D" },

   ]
}